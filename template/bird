define OWNAS       = 4242420365;
define OWNIP       = !MY_IPV4!;
define OWNIPv6	   = !MY_IPV6!;
define OWNNET      = 172.23.160.64/27;
define OWNNETv6    = fd01:4c1e:e3fd::/48;
define OWNNETSET   = [ 172.23.160.64/27+ ];
define OWNNETSETv6 = [ fd01:4c1e:e3fd::/48+ ];

router id OWNIP;

#log "/works/bird.log" all;

protocol device {
    scan time 10;
}

function is_self_net() {
    return net ~ OWNNETSET;
}

function is_self_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_network() {
    return net ~ [
        172.20.0.0/14{21,29},
        172.20.0.0/24{28,32},
        172.21.0.0/24{28,32},
        172.22.0.0/24{28,32},
        172.23.0.0/24{28,32},
        172.31.0.0/16+,
        10.100.0.0/14+,
        10.127.0.0/16{16,32},
        10.0.0.0/8{15,24}
    ];
}

roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol static {
    roa4 { table dn42_roa; };
    include "/etc/bird/dn42_roa.conf";
}

protocol static {
    roa6 { table dn42_roa_v6; };
    include "/etc/bird/dn42_roa_v6.conf";
}

function is_valid_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

protocol kernel {
    scan time 20;

    ipv4 {
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIP;
            accept;
        };
    };
}

protocol kernel {
    scan time 20;

    ipv6 {
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
}

protocol static {
    route OWNNET reject;

    ipv4 {
        import all;
        export none;
    };
}

protocol static {
    route OWNNETv6 reject;

    ipv6 {
        import all;
        export none;
    };
}

protocol direct {
    ipv4;
    ipv6;
    interface "dn42-dummy";
}   

template bgp dnpeers {
    local as OWNAS;
    path metric 1;
    

    ipv4 {
        extended next hop on;
        import filter {
            if is_valid_network() && !is_self_net() then {
                if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
                    print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
                    reject;
                }
                accept;
            }
            reject;
        };

        export filter {
            if is_valid_network() && source ~ [RTS_STATIC, RTS_BGP] then accept;
            reject;
        };
        import limit 1000 action block;
    };
    ipv6 {
	extended next hop on;   
        import filter {
          if is_valid_network_v6() && !is_self_net_v6() then {
            if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };
        export filter { if is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block; 
    };
}

template bgp ownnode {
    local as OWNAS;
    multihop;
    ipv4 {
        extended next hop on;
        next hop self;
        import all;
        export all;
    };
    ipv6 {
        next hop self;
        import all;
        export all;
    };
}

protocol babel ownbabel {
    ipv4 {
        import filter {if is_self_net() then accept; else reject; };
        export filter {if is_self_net() then accept; else reject; };
    };
    ipv6 {
        import filter {if is_self_net_v6() && net ~ [ ::/0{48,64} ] then accept; else reject; };
        export filter {if is_self_net_v6() && net ~ [ ::/0{48,64} ] then accept; else reject; };
    };
    randomize router id yes;
    interface "*.own" {
        type tunnel;
        rtt min 5ms;
        rtt max 500ms;
    };
}

include "/etc/bird/peers/*";
include "/etc/bird/own/*";
